{"version":3,"sources":["components/quotes/NoQuotesFound.js","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/pages/AllQuotes.js"],"names":["NoQuotesFound","className","classes","noquotes","to","module","exports","QuoteItem","props","item","text","author","id","QuoteList","quotes","ascending","history","useHistory","location","useLocation","isSortingAsc","URLSearchParams","search","get","sortedQuote","sort","quoteA","quoteB","sorting","onClick","push","list","map","quote","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"mIAAA,mCAceA,IAXO,WACpB,OACE,sBAAKC,UAAWC,IAAQC,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMC,GAAG,aAAaH,UAAU,MAAhC,8B,mBCNNI,EAAOC,QAAU,CAAC,SAAW,kC,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,gJCkB5CC,EAhBG,SAACC,GACjB,OACE,qBAAIP,UAAWC,IAAQO,KAAvB,UACE,mCACE,qCACE,4BAAID,EAAME,SAEZ,qCAAaF,EAAMG,YAErB,cAAC,IAAD,CAAMV,UAAU,MAAMG,GAAE,iBAAYI,EAAMI,IAA1C,iC,iBCyCSC,EA/CG,SAACL,GAEjB,IAAmBM,EAAQC,EASrBC,EAAUC,uBACVC,EAAWC,wBAGXC,EAA0C,QAF7B,IAAIC,gBAAgBH,EAASI,QAEhBC,IAAI,QAG9BC,GAhBaV,EAgBWN,EAAMM,OAhBTC,EAgBiBK,EAfnCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOd,GAAKe,EAAOf,GAAK,GAAK,EAE7Bc,EAAOd,GAAKe,EAAOf,GAAK,GAAK,MAkB1C,OACE,eAAC,WAAD,WACE,qBAAKX,UAAWC,IAAQ0B,QAAxB,SACE,yBAAQC,QARM,WAClBb,EAAQc,KAAK,iBAAmBV,EAAe,OAAS,SAOpD,kBACQA,EAAe,aAAe,iBAIxC,oBAAInB,UAAWC,IAAQ6B,KAAvB,SACGP,EAAYQ,KAAI,SAACC,GAAD,OACf,cAAC,EAAD,CAEErB,GAAIqB,EAAMrB,GACVD,OAAQsB,EAAMtB,OACdD,KAAMuB,EAAMvB,MAHPuB,EAAMrB,a,gBChCR,SAASsB,IACtB,MAKIC,YAAQC,KAAc,GAJxBC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMC,EAHR,EAGEC,KACAC,EAJF,EAIEA,MAOF,OAJAC,qBAAU,WACRL,MACC,CAACA,IAEW,YAAXC,EAEA,qBAAKrC,UAAU,WAAf,SACE,cAAC0C,EAAA,EAAD,MAKFF,EACK,mBAAGxC,UAAU,mBAAb,SAAiCwC,IAG3B,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaK,OAItD,cAAC,EAAD,CAAW9B,OAAQyB,IAHjB,cAACvC,EAAA,EAAD","file":"static/js/5.13d47c3a.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\r\nimport classes from \"./NoQuotesFound.module.css\";\r\n\r\nconst NoQuotesFound = () => {\r\n  return (\r\n    <div className={classes.noquotes}>\r\n      <p>No quotes found!</p>\r\n      <Link to=\"/new-quote\" className=\"btn\">\r\n        Add a Quote\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoQuotesFound;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__2cyWb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__EEL83\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3NLZH\",\"sorting\":\"QuoteList_sorting__tA018\"};","import { Link } from \"react-router-dom\";\r\nimport classes from \"./QuoteItem.module.css\";\r\n\r\nconst QuoteItem = (props) => {\r\n  return (\r\n    <li className={classes.item}>\r\n      <figure>\r\n        <blockquote>\r\n          <p>{props.text}</p>\r\n        </blockquote>\r\n        <figcaption>{props.author}</figcaption>\r\n      </figure>\r\n      <Link className=\"btn\" to={`quotes/${props.id}`}>\r\n        View Fullscreen\r\n      </Link>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default QuoteItem;\r\n","import { Fragment } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router\";\r\n\r\nimport QuoteItem from \"./QuoteItem\";\r\nimport classes from \"./QuoteList.module.css\";\r\n\r\nconst QuoteList = (props) => {\r\n  // console.log(\"Page Loaded\");\r\n  const sortQuote = (quotes, ascending) => {\r\n    return quotes.sort((quoteA, quoteB) => {\r\n      if (ascending) {\r\n        return quoteA.id > quoteB.id ? 1 : -1;\r\n      } else {\r\n        return quoteA.id < quoteB.id ? 1 : -1;\r\n      }\r\n    });\r\n  };\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const queryParam = new URLSearchParams(location.search);\r\n\r\n  const isSortingAsc = queryParam.get(\"sort\") === \"asc\";\r\n  // console.log(queryParam.get(\"sort\"), isSortingAsc);\r\n\r\n  const sortedQuote = sortQuote(props.quotes, isSortingAsc);\r\n\r\n  const sortHandler = () => {\r\n    history.push(\"/quotes?sort=\" + (isSortingAsc ? \"desc\" : \"asc\")); //history will be helpful in changing url\r\n    //whenever url changes it re-render this page\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className={classes.sorting}>\r\n        <button onClick={sortHandler}>\r\n          Sort {isSortingAsc ? \"Descending\" : \"Ascending\"}\r\n        </button>\r\n      </div>\r\n\r\n      <ul className={classes.list}>\r\n        {sortedQuote.map((quote) => (\r\n          <QuoteItem\r\n            key={quote.id}\r\n            id={quote.id}\r\n            author={quote.author}\r\n            text={quote.text}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteList;\r\n","import React, { useEffect } from \"react\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getAllQuotes } from \"../lib/api\";\r\nimport QuoteList from \"../quotes/QuoteList\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport NoQuotesFound from \"../quotes/NoQuotesFound\";\r\n// const DUMMY_DATA = [\r\n//   { id: \"q1\", author: \"Kapil\", text: \"Learning and improving Skills\" },\r\n//   { id: \"q2\", author: \"Vinay\", text: \"Having a Business\" },\r\n// ];\r\nexport default function AllQuotes() {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuotes,\r\n    error,\r\n  } = useHttp(getAllQuotes, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest();\r\n  }, [sendRequest]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner></LoadingSpinner>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered focused\">{error}</p>;\r\n  }\r\n\r\n  if (status === \"completed\" && (!loadedQuotes || loadedQuotes.length === 0)) {\r\n    return <NoQuotesFound></NoQuotesFound>;\r\n  }\r\n\r\n  return <QuoteList quotes={loadedQuotes} />;\r\n}\r\n"],"sourceRoot":""}