{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","components/pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","when","message","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","history","useHistory","useHttp","addQuote","sendRequest","status","useEffect","push","formData","console","log"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,iICKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCgE/BC,EA5DG,SAACL,GACjB,MAAoCM,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAiBC,mBACjBC,EAAeD,mBAoBrB,OACE,eAAC,WAAD,WACE,cAAC,SAAD,CACEE,KAAML,EACNM,QAAS,SAACC,GAAD,MAAc,yCAEzB,cAAC,EAAD,UACE,uBACEC,QAfiB,WACvBP,GAAc,IAeRP,UAAWC,IAAQc,KACnBC,SA5BR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBX,EAAeY,QAAQC,MACvCC,EAAcZ,EAAaU,QAAQC,MAIzCtB,EAAMwB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAiB5C,UAKGvB,EAAM2B,WACL,qBAAK1B,UAAWC,IAAQ0B,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK5B,UAAWC,IAAQ4B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKzB,OAEtC,sBAAKR,UAAWC,IAAQ4B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKvB,OAEpC,qBAAKV,UAAWC,IAAQkC,QAAxB,SACE,wBAAQC,QA9BK,WACrB7B,GAAc,IA6B2BP,UAAU,MAA3C,kC,gBClDG,SAASqC,IACtB,IAAMC,EAAUC,uBAChB,EAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAErBC,qBAAU,WACO,cAAXD,GACFL,EAAQO,KAAK,aAEd,CAACF,EAAQL,IAQZ,OACE,cAAC,EAAD,CACEZ,UAAsB,YAAXiB,EACXpB,WATsB,SAACuB,GACzBJ,EAAYI,GAEZC,QAAQC,IAAIF","file":"static/js/6.ccf77a1e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1l-S_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__2Um3Y\",\"loading\":\"QuoteForm_loading__2hOvq\",\"control\":\"QuoteForm_control__sI-oR\",\"actions\":\"QuoteForm_actions__3_Oi9\"};","import classes from './Card.module.css';\r\n\r\nconst Card = (props) => {\r\n  return <div className={classes.card}>{props.children}</div>;\r\n};\r\n\r\nexport default Card;\r\n","import { Fragment, useRef, useState } from \"react\";\r\nimport { Prompt } from \"react-router\";\r\n\r\nimport Card from \"../UI/Card\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport classes from \"./QuoteForm.module.css\";\r\n\r\nconst QuoteForm = (props) => {\r\n  const [isEntering, setIsEntering] = useState(false);\r\n  const authorInputRef = useRef();\r\n  const textInputRef = useRef();\r\n\r\n  function submitFormHandler(event) {\r\n    event.preventDefault();\r\n\r\n    const enteredAuthor = authorInputRef.current.value;\r\n    const enteredText = textInputRef.current.value;\r\n\r\n    // optional: Could validate here\r\n\r\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\r\n  }\r\n\r\n  const formFocusHandler = () => {\r\n    setIsEntering(true);\r\n  };\r\n\r\n  const onClickHandler = () => {\r\n    setIsEntering(false);\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <Prompt\r\n        when={isEntering}\r\n        message={(location) => \"Are you Sure want to leave the Page\"}\r\n      ></Prompt>\r\n      <Card>\r\n        <form\r\n          onFocus={formFocusHandler}\r\n          className={classes.form}\r\n          onSubmit={submitFormHandler}\r\n        >\r\n          {props.isLoading && (\r\n            <div className={classes.loading}>\r\n              <LoadingSpinner />\r\n            </div>\r\n          )}\r\n\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"author\">Author</label>\r\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\r\n          </div>\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"text\">Text</label>\r\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\r\n          </div>\r\n          <div className={classes.actions}>\r\n            <button onClick={onClickHandler} className=\"btn\">\r\n              Add Quote\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </Card>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteForm;\r\n","import React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport QuoteForm from \"../quotes/QuoteForm\";\r\n\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { addQuote } from \"../lib/api\";\r\n\r\nexport default function NewQuote() {\r\n  const history = useHistory();\r\n  const { sendRequest, status } = useHttp(addQuote);\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      history.push(\"/quotes\"); //push method allows the user to go back\r\n    }\r\n  }, [status, history]);\r\n\r\n  const onAddQuoteHandler = (formData) => {\r\n    sendRequest(formData);\r\n\r\n    console.log(formData);\r\n  };\r\n\r\n  return (\r\n    <QuoteForm\r\n      isLoading={status === \"pending\"}\r\n      onAddQuote={onAddQuoteHandler}\r\n    ></QuoteForm>\r\n  );\r\n}\r\n"],"sourceRoot":""}